{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "5afb5735-8c2b-4be8-8074-d51f830af90f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import math as math\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f733dbed-a6c0-4353-b491-cfaaf886c2af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "0fffe1f8-a81b-43ba-a8cf-2019c6affc29",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# the intention of this code is to assign a color to a pdb file based on a float value that is supplied independently. in this case it's conservation from a MSA\n",
    "#set up color ranges\n",
    "keys = [1,.9,.8,.7,.6,.5,.4,.3,.2,.1] #these are conservation values\n",
    "values = ['br0','br1','br2','br3','br4','br5','br6','br7','br8','br9'] #these are color codes\n",
    "color_dict=dict(zip(keys,values))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def color_assign(conservation_value, color_dict):\n",
    "    for key in list(color_dict.keys()):\n",
    "        #print(key)\n",
    "        if math.isclose(conservation_value, key,abs_tol=.1):\n",
    "            return color_dict[key]\n",
    "                             \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c31943a-7075-439d-845d-4a63911c1a84",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the identity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "1530e362-630a-4d2b-97a2-86e0e2f4bed5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Position</th>\n",
       "      <th>Identity</th>\n",
       "      <th>color</th>\n",
       "      <th>paste_to_pymol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.71</td>\n",
       "      <td>br2</td>\n",
       "      <td>color br2, resi 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.37</td>\n",
       "      <td>br6</td>\n",
       "      <td>color br6, resi 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.38</td>\n",
       "      <td>br6</td>\n",
       "      <td>color br6, resi 3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.30</td>\n",
       "      <td>br7</td>\n",
       "      <td>color br7, resi 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.30</td>\n",
       "      <td>br7</td>\n",
       "      <td>color br7, resi 5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Position  Identity color      paste_to_pymol\n",
       "0         1      0.71   br2  color br2, resi 1 \n",
       "1         2      0.37   br6  color br6, resi 2 \n",
       "2         3      0.38   br6  color br6, resi 3 \n",
       "3         4      0.30   br7  color br7, resi 4 \n",
       "4         5      0.30   br7  color br7, resi 5 "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df= pd.read_csv('Identity.csv') \n",
    "df['color']=df['Identity'].apply(lambda x: color_assign(x,color_dict)) #apply color dictionary\n",
    "df['paste_to_pymol']= 'color ' + df['color'] + ', resi ' + df['Position'].astype('str') + ' '\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "7b62b840-c4f3-4120-a002-976dcdf6be67",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#this will have a column that can paste the coloring instructions into pymol\n",
    "df.to_csv(\"pymol_paste.csv\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae7165d9-e3a7-4f57-b68f-a22c951ecb7e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f63a863-2b7b-4b16-b32a-2f6e6e7a9ef9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
